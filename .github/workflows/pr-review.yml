name: 🤖 AI PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  ai-review:
    name: AI Code Review
    runs-on: ubuntu-latest

    # ドラフトPRはスキップ
    if: github.event.pull_request.draft == false

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          # PR全体の変更を取得するため、十分な履歴を取得
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci

      - name: 🔨 Build TypeScript
        run: |
          npm run build
          echo "✅ ビルド完了"
          ls -la dist/
          echo "📄 github-action.js の先頭確認:"
          head -20 dist/github-action.js

      - name: 🤖 Run AI PR Review
        id: ai-review
        run: |
          # TypeScriptをビルドしてから実行（ES Module対応）
          echo "🔍 GitHub Actions環境変数チェック"
          echo "GITHUB_ACTIONS: $GITHUB_ACTIONS"
          echo "GITHUB_TOKEN: ${GITHUB_TOKEN:0:10}..."
          echo "OPENAI_API_KEY: ${OPENAI_API_KEY:0:10}..."
          echo "🚀 AI PR Review開始"
          node dist/github-action.js
        env:
          # GitHub Token（PR書き込み権限付き）
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          # AI Provider設定（お好みのAIプロバイダーを選択）
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          # GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}

          # レビュー設定
          AI_REVIEW_ENABLED: 'true'
          AI_REVIEW_MAX_FILES: '20'
          AI_REVIEW_MAX_LINES: '5000'

          # ログレベル設定
          LOG_LEVEL: 'info'

      - name: 📊 Upload review artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ai-review-results
          path: |
            logs/
            review-*.json
          retention-days: 7

      - name: 📋 Comment review summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            // レビュー結果の出力値を取得
            const reviewId = '${{ steps.ai-review.outputs.review-id }}';
            const totalComments = '${{ steps.ai-review.outputs.total-comments }}';
            const overallScore = '${{ steps.ai-review.outputs.overall-score }}';
            const recommendation = '${{ steps.ai-review.outputs.recommendation }}';
            const error = '${{ steps.ai-review.outputs.error }}';

            if (error) {
              // エラーがある場合はエラーメッセージを投稿
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## ❌ AI レビューエラー\n\n` +
                      `AI レビューの実行中にエラーが発生しました：\n\n` +
                      `\`\`\`\n${error}\n\`\`\`\n\n` +
                      `詳細については、[Actions のログ](${context.payload.repository.html_url}/actions/runs/${context.runId})をご確認ください。`
              });
            } else {
              // 成功の場合は基本情報をコメント（詳細はPRレビューに投稿済み）
              const scoreEmoji = overallScore >= 8 ? '🟢' : overallScore >= 6 ? '🟡' : '🔴';
              const recommendationEmoji = {
                'approve': '✅',
                'requestChanges': '🔄',
                'comment': '💬'
              }[recommendation] || '💬';

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## ${scoreEmoji} AI レビュー完了\n\n` +
                      `- **スコア**: ${overallScore}/10\n` +
                      `- **推奨**: ${recommendationEmoji} ${recommendation}\n` +
                      `- **検出問題**: ${totalComments}件\n\n` +
                      `詳細なレビューコメントは上記をご確認ください。`
              });
            }

  # セキュリティチェック（オプション）
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 依存関係チェック（オプション）
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔍 Audit dependencies
        run: |
          npm audit --audit-level=moderate

      - name: 📦 Check for outdated packages
        run: |
          npm outdated || true  # outdatedがあっても失敗させない
